#!/usr/bin/env node

/**
 * Module dependencies.
 */

 var app = require('../app');
 var debug = require('debug')('tieuluan:server');
 var http = require('http');

/**
 * Get port from environment and store in Express.
 */

 var port = normalizePort(process.env.PORT || '3000');
 app.set('port', port);

/**
 * Create HTTP server.
 */

 var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

 var io = require("socket.io")(server);
 server.listen(port);
 server.on('error', onError);
 server.on('listening', onListening);

 var onl = 0;
 var curr =0;
 var manguser = [] ;
 var x;
 io.on("connection", function(socket){
  var name="";
  socket.on("disconnect", function(){
    if(name!=""){

      onl--;    
      console.log(name + " :da ngat ket noi");
      console.log("so nguoi dang online: " +onl);
        x = manguser.indexOf(name);
        if(x>=0){
          manguser.splice(x , 1);
        }
        manguser.forEach( function(i) {
          console.log(i);
        });
      }
      io.sockets.emit("listuser", manguser);
  });
  

  socket.on("tenuser",function(data){

    if(manguser.indexOf(data)>=0){

      socket.emit("server gui kq dk", 0)
    }
    else {
      name = data;
      onl++;
      console.log("so nguoi dang online: " +onl);
      console.log("co nguoi ket noi: " + data);
      manguser.push(data);
      socket.emit("server gui kq dk", 1)
      manguser.forEach( function(i) {
        console.log(i)
      });
    }

    io.sockets.emit("listuser", manguser);

  });


});

/**
 * Normalize a port into a number, string, or false.
 */

 function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

 function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
  ? 'Pipe ' + port
  : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
    console.error(bind + ' requires elevated privileges');
    process.exit(1);
    break;
    case 'EADDRINUSE':
    console.error(bind + ' is already in use');
    process.exit(1);
    break;
    default:
    throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

 function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
  ? 'pipe ' + addr
  : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
